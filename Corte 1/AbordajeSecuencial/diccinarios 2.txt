#### Get A Key
# Acceder a un valor dentro de un diccionario usando la clave

building_heights = {
    "Burj Khalifa": 828,
    "Shanghai Tower": 632,
    "Abraj Al Bait": 601,
    "Ping An": 599,
    "Lotte World Tower": 554.5,
    "One World Trade": 541.3
}
print(building_heights["Burj Khalifa"])  # Imprime 828
print(building_heights["Ping An"])       # Imprime 599


# Diccionario con elementos del zodiaco agrupados por elemento
zodiac_elements = {
    "water": ["Cancer", "Scorpio", "Pisces"],
    "fire": ["Aries", "Leo", "Sagittarius"],
    "earth": ["Taurus", "Virgo", "Capricorn"],
    "air": ["Gemini", "Libra", "Aquarius"]
}
print(zodiac_elements["earth"])  # Muestra lista de signos de tierra
print(zodiac_elements["fire"])   # Muestra lista de signos de fuego


## Get an Invalid Key
# Intentar acceder a una clave inexistente genera un error (KeyError)
# print(building_heights["Landmark 81"])  # ❌ Da error porque no existe esa clave


## Forma segura: comprobar si la clave existe antes de usarla
key_to_check = "Landmark 81"

if key_to_check in building_heights:
    print(building_heights["Landmark 81"])  # Solo se ejecuta si existe la clave


# Agregar nueva clave a un diccionario
zodiac_elements["energy"] = "Not a Zodiac element"

if "energy" in zodiac_elements:
    print(zodiac_elements["energy"])  # Imprime "Not a Zodiac element"


## Safely Get a Key con .get()
# .get() devuelve el valor si existe la clave, o None si no existe

building_heights.get("Shanghai Tower")  # Devuelve 632
building_heights.get("My House")        # Devuelve None


# Diccionario de usuarios con sus IDs
user_ids = {
    "teraCoder": 100019,
    "pythonGuy": 182921,
    "samTheJavaMaam": 123112,
    "lyleLoop": 102931,
    "keysmithKeith": 129384
}

# Si la clave existe devuelve el ID, si no, devuelve None
if user_ids.get("teraCoder") == None:
    tc_id = 1000
else:
    tc_id = user_ids.get("teraCoder")

print(tc_id)  # Imprime 100019

# Manejo de clave inexistente
if user_ids.get("superStackSmash") == None:
    stack_id = 100000

print(stack_id)  # Imprime 100000


### Delete a Key con .pop()
raffle = {
    223842: "Teddy Bear",
    872921: "Concert Tickets",
    320291: "Gift Basket",
    412123: "Necklace",
    298787: "Pasta Maker"
}

print(raffle.pop(320291, "No Prize"))  # Elimina clave 320291 → devuelve "Gift Basket"
print(raffle)

print(raffle.pop(100000, "No Prize"))  # Si no existe devuelve "No Prize"
print(raffle)

print(raffle.pop(872921, "No Prize"))  # Elimina clave 872921 → devuelve "Concert Tickets"
print(raffle)


# Ejemplo de pop() para sumar puntos de vida con objetos disponibles
available_items = {
    "health potion": 10,
    "cake of the cure": 5,
    "green elixir": 20,
    "strength sandwich": 25,
    "stamina grains": 15,
    "power stew": 30
}
health_points = 20

# pop elimina el ítem del diccionario y devuelve su valor (si existe)
health_points += available_items.pop("stamina grains", 0)
health_points += available_items.pop("power stew", 0)
health_points += available_items.pop("mystic bread", 0)  # No existe → devuelve 0

print(available_items)  # Diccionario sin "stamina grains" ni "power stew"
print(health_points)    # Puntos de vida acumulados


## Get All Keys
test_scores = {
    "Grace": [80, 72, 90],
    "Jeffrey": [88, 68, 81],
    "Sylvia": [80, 82, 84],
    "Pedro": [98, 96, 95],
    "Martin": [78, 80, 78],
    "Dina": [64, 60, 75]
}

print(list(test_scores))  # Convierte las claves a lista

for student in test_scores.keys():  # Iterar sobre claves
    print(student)


# Ejemplo con diccionarios de usuarios y ejercicios
user_ids = {
    "teraCoder": 100019,
    "pythonGuy": 182921,
    "samTheJavaMaam": 123112,
    "lyleLoop": 102931,
    "keysmithKeith": 129384
}
num_exercises = {
    "functions": 10,
    "syntax": 13,
    "control flow": 15,
    "loops": 22,
    "lists": 19,
    "classes": 18,
    "dictionaries": 18
}

users = user_ids.keys()
lessons = num_exercises.keys()

print(users)    # Todas las claves de user_ids
print(lessons)  # Todas las claves de num_exercises


## Get All Values
for score_list in test_scores.values():  # Iterar sobre valores
    print(score_list)

total_exercises = 0
for exercises in num_exercises.values():  # Suma de todos los valores
    total_exercises += exercises
print(total_exercises)


## Get All Items
biggest_brands = {
    "Apple": 184,
    "Google": 141.7,
    "Microsoft": 80,
    "Coca-Cola": 69.7,
    "Amazon": 64.8
}

# .items() devuelve pares clave-valor
for company, value in biggest_brands.items():
    print(company + " has a value of " + str(value) + " billion dollars. ")


pct_women_in_occupation = {
    "CEO": 28,
    "Engineering Manager": 9,
    "Pharmacist": 58,
    "Physician": 40,
    "Lawyer": 37,
    "Aerospace Engineer": 9
}

for occupation, percentage in pct_women_in_occupation.items():
    print("Women make up " + str(percentage) + " percent of " + occupation + "s.")
